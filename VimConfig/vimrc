source $VIMRUNTIME/vimrc_example.vim
source $VIMRUNTIME/mswin.vim
behave mswin

set diffexpr=MyDiff()
function MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      if empty(&shellxquote)
        let l:shxq_sav = ''
        set shellxquote&
      endif
      let cmd = '"' . $VIMRUNTIME . '\diff"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3
  if exists('l:shxq_sav')
    let &shellxquote=l:shxq_sav
  endif
endfunction

set modelines=0     " CVE-2007-2438

" Normally we use vim-extensions. If you want true vi-compatibility
" remove change the following statements
set nocompatible    " Use Vim defaults instead of 100% vi compatibility

"map the , to <leader>
let mapleader=","                

" 用浅色高亮当前行
"autocmd InsertLeave * se nocul
"autocmd InsertEnter * se cul

set confirm   " 在处理未保存或只读文件的时候，弹出确认
set gdefault  " 行内替换

"设置文件的代码形式 utf8
set encoding=utf-8
set termencoding=utf-8
set fileencoding=utf-8
set fileencodings=ucs-bom,utf-8,chinese,shift-jis,gb18030,gbk,gb2312,cp936,utf-16,big5,euc-jp,latin1

"vim的菜单乱码解决
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim

"vim提示信息乱码的解决
language messages zh_CN.utf-8

"配色方案(设置颜色主题)
syntax enable     "打开语法高亮
syntax on         "打开语法高亮
set background=dark
"colorscheme desert
colorscheme solarized
"colorscheme molokai

set helplang=cn     "设置中文帮助
set history=500     "保留历史记录

set guifont=Monaco:h10  "设置字体为Monaco，大小10
"set guifont=Menlo:h16:cANSI

set backspace=2     "设置退格键可用
"set nu!            "设置显示行号
set wrap            "设置自动换行
"set nowrap         "设置不自动换行
set linebreak       "整词换行，与自动换行搭配使用
"set list           "显示制表符
set autochdir       "自动设置当前目录为正在编辑的目录
set hidden          "自动隐藏没有保存的缓冲区，切换buffer时不给出保存当前buffer的提示
set scrolloff=5     "在光标接近底端或顶端时，自动下滚或上滚
"Toggle Menu and Toolbar    "隐藏菜单栏和工具栏
"set guioptions-=m
"set guioptions-=T
set showtabline=2   "设置显是显示标签栏
set autoread        "设置当文件在外部被修改，自动更新该文件
set mouse=a         "设置在任何模式下鼠标都可用
set nobackup        "设置不生成备份文件
set noundofile      "设置不生成undo文件
"set go=            "不要图形按钮
set guioptions-=T   " 隐藏工具栏
"set guioptions-=m  " 隐藏菜单栏
 
"===========================
"查找/替换相关的设置
"===========================
set hlsearch  "高亮显示查找结果
set incsearch "增量查找
 
"===========================
"状态栏的设置
"===========================
"set statusline=[%F]%y%r%m%*%=[Line:%l/%L,Column:%c][%p%%] "显示文件名：总行数，总的字符数
"set ruler "在编辑过程中，在右下角显示光标位置的状态行
 
"===========================
"代码设置Coding
"==========================
set tabstop=4        "tab的跳数为4
set softtabstop=4    
set shiftwidth=4     "换行时交替使用4个空格
set expandtab        "空格代替tab
set filetype=unix

"au BufNewFile,BufRead *.js, *.html, *.css
"\ set tabstop=2
"\ set softtabstop=2
"\ set shiftwidth=2
"\ set noexpandtab

set showmatch    "设置匹配模式，相当于括号匹配
set smartindent  "智能对齐
set autoindent   "设置自动对齐
set ai!          "设置自动缩进
"set cursorcolumn "启用光标列
set cursorline   "启用光标行
set guicursor+=a:blinkon0 "设置光标不闪烁
"set fdm=indent  "更多的缩进表示更高级别的折叠

"======================================
"插件管理(Plugins management)
"======================================
filetype off                  " required

" set the runtime path to include Vundle and initialize
" 设置包括vundle和初始化相关的runtime path
" 判断操作系统类型
if(has('win32') || has('win64'))
    set rtp+=$VIM/vimfiles/bundle/Vundle.vim
    let bunpath='$VIM/vimfiles/bundle'
else
    set rtp+=~/.vim/bundle/Vundle.vim
    let bunpath='~/.vim/bundle'
endif
call vundle#begin(bunpath)

" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
if(has('win32') || has('win64'))
else
    Plugin 'Valloric/YouCompleteMe'
endif
Plugin 'kien/ctrlp.vim'
Plugin 'majutsushi/tagbar'
Plugin 'vim-scripts/ctags.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/nerdcommenter'

"@code format
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'
Plugin 'vim-syntastic/syntastic'
Plugin 't9md/vim-quickhl'

"@plugin themes
Plugin 'tomasr/molokai'
Plugin 'vim-airline/vim-airline'
Plugin 'altercation/vim-colors-solarized' 

" plugin from http://vim-scripts.org/vim/scripts.html
"Plugin 'L9'

" Git plugin not hosted on GitHub
"Plugin 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
"Plugin 'file://~/MyFolder/Coding/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
"Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Install L9 and avoid a Naming conflict if you've already installed a
" different version somewhere else.
"Plugin 'ascenator/L9', {'name': 'newL9'}

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" 分为三部分命令：file on, file plugin on, file indent on.分别表示自动识别文件类型，用文件类型脚本，使用缩进定义文件。
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

"==============================================
" 插件配置(Plugins Configuration)
" =============================================
"
" 设置NerdTree（侧边栏）
map <F3> :NERDTreeMirror<CR>
map <F3> :NERDTreeToggle<CR>
" 关闭文件时同时关闭文件浏览器
let NERDTreeQuitOnOpen = 1
let NERDTreeIgnore=['\.pyc$', '\~$'] "ignore files in NERDTree
"当打开vim且没有文件时自动打开NERDTree
"autocmd vimenter * if !argc() | NERDTree | endif
" 只剩 NERDTree时自动关闭
"autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

" CTags & Tagbar的设定 
map <F2> :TagbarToggle<CR> 
if(has('win32') || has('win64'))
    let g:tagbar_ctags_bin = '$VIM/exec/ctags.exe'
else
    let g:tagbar_ctags_bin = '/usr/local/bin/ctags'
endif
let g:tagbar_width = 30
let g:tagbar_right=1
set autochdir 

"Air-line setting
let g:airline#extensions#tabline#enabled = 1 "auto open tab windows

"YouCompleteMe Setting
let g:ycm_autoclose_preview_window_after_completion=1
map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>

"NERD Commenter Setting
let g:NERDSpaceDelims = 1            " Add spaces after comment delimiters by default
let g:NERDCompactSexyComs = 1        " Use compact syntax for prettified multi-line comments
let g:NERDDefaultAlign = 'left'      " Enable trimming of trailing whitespace when uncommenting
let g:NERDCommentEmptyLines = 1      " Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDTrimTrailingWhitespace = 1 " Enable trimming of trailing whitespace when uncommenting

"Tabular Setting
vmap <Leader>a= :Tabularize /=<CR>
vmap <Leader>a: :Tabularize /:\zs<CR>

"Quickhl Setting
nmap <Space>m <Plug>(quickhl-manual-this)
xmap <Space>m <Plug>(quickhl-manual-this)
nmap <Space>M <Plug>(quickhl-manual-reset)
xmap <Space>M <Plug>(quickhl-manual-reset)

"======================================================
"自定义按键 key mapping
"======================================================
vnoremap $1 <esc>`>a)<esc>`<i(<esc>
vnoremap $2 <esc>`>a]<esc>`<i[<esc>
vnoremap $3 <esc>`>a}<esc>`<i{<esc>
vnoremap $$ <esc>`>a"<esc>`<i"<esc>
vnoremap $q <esc>`>a'<esc>`<i'<esc>
vnoremap $e <esc>`>a"<esc>`<i"<esc>
" 括号自动生成

" C,C++,Java,Python按F5编译运行
map <F5> :call CompileRunGcc()<CR>
func! CompileRunGcc()
    exec "w"
    if &filetype == 'c'
        exec "!gcc % -o %<"
        exec "! ./%<"
    elseif &filetype == 'cpp'
        exec "!g++ % -o %<"
        exec "! ./%<"
    elseif &filetype == 'java' 
        exec "!javac %" 
        exec "!java %<"
    elseif &filetype == 'sh'
        :!./%
    elseif &filetype == 'python'
        exec "!python3 -u %"
    endif
endfunc


" Don't write backup file if vim is being called by "crontab -e"
au BufWrite /private/tmp/crontab.* set nowritebackup
" Don't write backup file if vim is being called by "chpass"
au BufWrite /private/etc/pw.* set nowritebackup

